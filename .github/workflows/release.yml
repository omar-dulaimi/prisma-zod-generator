name: Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and test
      run: |
        npm run gen-example
        npm run test:type-check
        npm run lint
        npm run test:basic
        
    - name: Check for uncommitted changes
      run: npm run check-uncommitted
      
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Determine version bump
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
        else
          # Auto-determine version bump based on commit messages
          if git log --format=%B -n 1 | grep -q "BREAKING CHANGE\|breaking change"; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif git log --format=%B -n 1 | grep -qE "^feat(\(.+\))?\!?:|^feature(\(.+\))?\!?:"; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Bump version
      id: bump
      run: |
        OLD_VERSION=$(node -p "require('./package.json').version")
        npm version ${{ steps.version.outputs.type }} --no-git-tag-version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Update package.json in package directory
      run: |
        ./package.sh
        
    - name: Commit version bump
      run: |
        git add package.json package/package.json
        git commit -m "chore: bump version to v${{ steps.bump.outputs.new_version }} [skip ci]"
        git tag "v${{ steps.bump.outputs.new_version }}"
        
    - name: Push changes
      run: |
        git push origin master
        git push origin "v${{ steps.bump.outputs.new_version }}"
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ steps.bump.outputs.new_version }}"
        release_name: "Release v${{ steps.bump.outputs.new_version }}"
        body: |
          ## Changes
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/master/CHANGELOG.md) for detailed changes.
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.old_version }}...v${{ steps.bump.outputs.new_version }}
        draft: false
        prerelease: false
        
    - name: Publish to NPM
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd package
        npm publish --access public
        
    - name: Upload package artifact
      uses: actions/upload-artifact@v4
      with:
        name: published-package-v${{ steps.bump.outputs.new_version }}
        path: package/
        retention-days: 30