name: Extended Test Matrix

on:
  schedule:
    # Run extended tests nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ master ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'prisma/**'

jobs:
  comprehensive-tests:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x, 22.x]
        include:
          # Test on additional Node.js versions on Ubuntu only
          - os: ubuntu-latest
            node-version: 16.x
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run gen-example
      
    - name: Run comprehensive test suite
      run: npm run test:comprehensive
      timeout-minutes: 30
      
    - name: Run performance comparison tests
      run: npm run test:performance
      timeout-minutes: 15
      
    - name: Run cross-provider compatibility tests
      run: npm run test:compatibility
      timeout-minutes: 20
      
    - name: Generate test report
      if: always()
      run: |
        echo "## Test Results for ${{ matrix.os }} - Node.js ${{ matrix.node-version }}" > test-summary.md
        echo "Date: $(date)" >> test-summary.md
        echo "OS: ${{ matrix.os }}" >> test-summary.md
        echo "Node.js: ${{ matrix.node-version }}" >> test-summary.md
        if [ -f "test-report.json" ]; then
          echo "Test report generated successfully" >> test-summary.md
        else
          echo "Test report generation failed" >> test-summary.md
        fi
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
        path: |
          test-report.json
          test-results.json
          test-summary.md
          coverage/
        retention-days: 14

  database-compatibility:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306
          
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: root
        options: >-
          --health-cmd="echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test databases
      run: |
        # Create .env file with database connections
        cat > .env << EOF
        POSTGRESQL_URL="postgresql://postgres:postgres@localhost:5432/testdb"
        MYSQL_URL="mysql://root:root@localhost:3306/testdb"
        MONGODB_URL="mongodb://root:root@localhost:27017/testdb?authSource=admin"
        SQLITE_URL="file:./test.db"
        SQLSERVER_URL="sqlserver://localhost:1433;database=testdb;user=sa;password=YourStrong@Passw0rd;trustServerCertificate=true"
        EOF
        
    - name: Run database-specific tests
      run: |
        npm run test:provider:postgresql
        npm run test:provider:mysql  
        npm run test:provider:mongodb
        npm run test:provider:sqlite
        
    - name: Run generation tests for all providers
      run: |
        npm run test:generation:postgresql
        npm run test:generation:mysql
        npm run test:generation:mongodb
        npm run test:generation:sqlite
        
    - name: Upload database test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: database-compatibility-results
        path: |
          test-report.json
          prisma/schemas/*/generated/
        retention-days: 7