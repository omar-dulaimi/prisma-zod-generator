// SQLite Comprehensive Test Schema
// Tests SQLite-specific features and limitations

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider          = "node ./lib/generator.js"
  output            = "./generated"
  isGenerateSelect  = true
  isGenerateInclude = true
}

datasource db {
  provider = "sqlite"
  url      = env("SQLITE_URL")
}

// =============================================================================
// SQLITE TYPE AFFINITY TESTING
// =============================================================================

model SQLiteAllTypes {
  id                Int                 @id @default(autoincrement())
  
  // SQLite type affinities
  integerField      Int                 // INTEGER affinity
  realField         Float               // REAL affinity
  textField         String              // TEXT affinity
  blobField         Bytes               // BLOB affinity
  
  // Boolean stored as INTEGER (0 or 1)
  booleanField      Boolean             @default(false)
  
  // Date/Time stored as TEXT, REAL, or INTEGER
  dateField         DateTime            @default(now())
  timestampField    DateTime            @updatedAt
  
  // JSON stored as TEXT
  jsonField         Json?
  
  // Decimal stored as TEXT or REAL
  decimalField      Decimal?
  
  // BigInt stored as TEXT or INTEGER
  bigintField       BigInt?
  
  // String variations (all TEXT affinity)
  varcharField      String              @default("default")
  charField         String              @default("char")
  textFieldLong     String?
  
  // Optional fields for null testing
  optionalInt       Int?
  optionalString    String?
  optionalFloat     Float?
  optionalBytes     Bytes?
  optionalJson      Json?
  optionalDecimal   Decimal?
  optionalBigInt    BigInt?
  optionalBoolean   Boolean?
  optionalDate      DateTime?
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlite_all_types")
}

// =============================================================================
// SQLITE ENUM TESTING (Stored as TEXT)
// =============================================================================

enum SQLiteUserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  ARCHIVED
}

enum SQLiteUserRole {
  ADMIN
  MODERATOR
  USER
  GUEST
}

enum SQLitePostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum SQLitePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum SQLiteContentType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  LINK
}

// =============================================================================
// SQLITE RELATIONSHIP TESTING
// =============================================================================

model SQLiteUser {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  username          String              @unique
  firstName         String
  lastName          String
  passwordHash      String
  status            SQLiteUserStatus    @default(ACTIVE)
  role              SQLiteUserRole      @default(USER)
  
  // Profile information
  bio               String?
  avatarUrl         String?
  website           String?
  location          String?
  birthDate         DateTime?
  phoneNumber       String?
  
  // Metadata as JSON
  metadata          Json?
  preferences       Json?
  settings          Json?
  
  // One-to-one relationship
  profile           SQLiteProfile?
  
  // One-to-many relationships
  posts             SQLitePost[]
  comments          SQLiteComment[]
  likes             SQLiteLike[]
  bookmarks         SQLiteBookmark[]
  
  // Many-to-many relationships
  followedUsers     SQLiteFollow[]      @relation("UserFollows")
  followers         SQLiteFollow[]      @relation("UserFollowers")
  joinedGroups      SQLiteGroupMember[]
  
  // Self-referential relationships
  managerId         Int?
  manager           SQLiteUser?         @relation("UserManagement", fields: [managerId], references: [id])
  subordinates      SQLiteUser[]        @relation("UserManagement")
  
  // Timestamps
  lastLoginAt       DateTime?
  emailVerifiedAt   DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlite_users")
}

model SQLiteProfile {
  id                Int                 @id @default(autoincrement())
  userId            Int                 @unique
  displayName       String?
  company           String?
  jobTitle          String?
  industry          String?
  education         String?
  skills            String?             // JSON array as string
  languages         String?             // JSON array as string
  timezone          String?
  isPublic          Boolean             @default(true)
  showEmail         Boolean             @default(false)
  showPhone         Boolean             @default(false)
  
  // Additional profile data as JSON
  socialLinks       Json?
  achievements      Json?
  certifications    Json?
  
  user              SQLiteUser          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlite_profiles")
}

model SQLitePost {
  id                Int                 @id @default(autoincrement())
  title             String
  slug              String              @unique
  content           String?
  excerpt           String?
  featuredImage     String?
  status            SQLitePostStatus    @default(DRAFT)
  priority          SQLitePriority      @default(MEDIUM)
  contentType       SQLiteContentType   @default(TEXT)
  
  // Publishing
  publishedAt       DateTime?
  scheduledAt       DateTime?
  
  // SEO
  seoTitle          String?
  seoDescription    String?
  
  // Metadata as JSON
  metadata          Json?
  customFields      Json?
  tags              String?             // JSON array as string
  categories        String?             // JSON array as string
  
  // Statistics
  viewCount         Int                 @default(0)
  likeCount         Int                 @default(0)
  commentCount      Int                 @default(0)
  shareCount        Int                 @default(0)
  
  // Author reference
  authorId          Int
  author            SQLiteUser          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // One-to-many relationships
  comments          SQLiteComment[]
  likes             SQLiteLike[]
  bookmarks         SQLiteBookmark[]
  
  // Many-to-many relationships
  postTags          SQLitePostTag[]
  postCategories    SQLitePostCategory[]
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlite_posts")
}

model SQLiteComment {
  id                Int                 @id @default(autoincrement())
  content           String
  isEdited          Boolean             @default(false)
  editedAt          DateTime?
  isApproved        Boolean             @default(true)
  approvedAt        DateTime?
  
  // Author reference
  authorId          Int
  author            SQLiteUser          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  // Post reference
  postId            Int
  post              SQLitePost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  // Self-referential for nested comments
  parentId          Int?
  parent            SQLiteComment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies           SQLiteComment[]     @relation("CommentReplies")
  
  // Metadata
  metadata          Json?
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlite_comments")
}

model SQLiteLike {
  id                Int                 @id @default(autoincrement())
  
  userId            Int
  user              SQLiteUser          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId            Int
  post              SQLitePost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime            @default(now())
  
  @@map("sqlite_likes")
  @@unique([userId, postId])
}

model SQLiteBookmark {
  id                Int                 @id @default(autoincrement())
  
  userId            Int
  user              SQLiteUser          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  postId            Int
  post              SQLitePost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime            @default(now())
  
  @@map("sqlite_bookmarks")
  @@unique([userId, postId])
}

model SQLiteTag {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  slug              String              @unique
  description       String?
  color             String?
  isActive          Boolean             @default(true)
  usageCount        Int                 @default(0)
  
  // Many-to-many with posts
  posts             SQLitePostTag[]
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlite_tags")
}

model SQLitePostTag {
  postId            Int
  post              SQLitePost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  tagId             Int
  tag               SQLiteTag           @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime            @default(now())
  
  @@id([postId, tagId])
  @@map("sqlite_post_tags")
}

model SQLiteCategory {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  slug              String              @unique
  description       String?
  color             String?
  icon              String?
  isActive          Boolean             @default(true)
  sortOrder         Int                 @default(0)
  
  // Self-referential for category hierarchy
  parentId          Int?
  parent            SQLiteCategory?     @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          SQLiteCategory[]    @relation("CategoryHierarchy")
  
  // Many-to-many with posts
  posts             SQLitePostCategory[]
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlite_categories")
}

model SQLitePostCategory {
  postId            Int
  post              SQLitePost          @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  categoryId        Int
  category          SQLiteCategory      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  isPrimary         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  
  @@id([postId, categoryId])
  @@map("sqlite_post_categories")
}

model SQLiteFollow {
  id                Int                 @id @default(autoincrement())
  
  followerId        Int
  follower          SQLiteUser          @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  
  followingId       Int
  following         SQLiteUser          @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime            @default(now())
  
  @@map("sqlite_follows")
  @@unique([followerId, followingId])
}

model SQLiteGroup {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  slug              String              @unique
  description       String?
  isPrivate         Boolean             @default(false)
  isActive          Boolean             @default(true)
  maxMembers        Int?
  memberCount       Int                 @default(0)
  
  // Settings as JSON
  settings          Json?
  rules             String?             // JSON array as string
  
  // Many-to-many with users
  members           SQLiteGroupMember[]
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlite_groups")
}

model SQLiteGroupMember {
  id                Int                 @id @default(autoincrement())
  
  userId            Int
  user              SQLiteUser          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  groupId           Int
  group             SQLiteGroup         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  role              String              @default("member")
  isActive          Boolean             @default(true)
  joinedAt          DateTime            @default(now())
  
  @@map("sqlite_group_members")
  @@unique([userId, groupId])
}

// =============================================================================
// SQLITE FULL-TEXT SEARCH TESTING
// =============================================================================

model SQLiteSearchIndex {
  id                Int                 @id @default(autoincrement())
  
  // Document reference
  documentId        Int
  documentType      String
  
  // Search content
  title             String
  content           String
  tags              String?             // JSON array as string
  categories        String?             // JSON array as string
  
  // Search metadata
  language          String              @default("en")
  searchScore       Float               @default(0.0)
  
  // Timestamps
  indexedAt         DateTime            @default(now())
  lastUpdated       DateTime            @updatedAt
  
  @@map("sqlite_search_index")
}

// =============================================================================
// SQLITE ANALYTICS AND METRICS
// =============================================================================

model SQLiteAnalytics {
  id                Int                 @id @default(autoincrement())
  eventType         String
  eventName         String
  
  // Event data as JSON
  properties        Json?
  userProperties    Json?
  
  // Session information
  sessionId         String?
  userId            Int?
  
  // Technical details as JSON
  deviceInfo        Json?
  browserInfo       Json?
  locationInfo      Json?
  
  // Timestamps
  timestamp         DateTime            @default(now())
  
  @@map("sqlite_analytics")
}

model SQLiteMetric {
  id                Int                 @id @default(autoincrement())
  name              String
  value             Float
  unit              String?
  
  // Dimensions as JSON
  dimensions        Json?
  
  // Time-based data
  timestamp         DateTime            @default(now())
  period            String?
  
  // Metadata
  metadata          Json?
  
  @@map("sqlite_metrics")
}

// =============================================================================
// SQLITE AUDIT AND LOGGING
// =============================================================================

model SQLiteAuditLog {
  id                Int                 @id @default(autoincrement())
  
  // Operation details
  operation         String
  tableName         String
  recordId          Int?
  
  // Change tracking as JSON
  oldValues         Json?
  newValues         Json?
  changes           Json?
  
  // User context
  userId            Int?
  userEmail         String?
  userRole          String?
  
  // Request context
  requestId         String?
  sessionId         String?
  ipAddress         String?
  userAgent         String?
  
  // Metadata
  metadata          Json?
  
  // Timestamp
  timestamp         DateTime            @default(now())
  
  @@map("sqlite_audit_log")
}

// =============================================================================
// SQLITE CONFIGURATION
// =============================================================================

model SQLiteConfig {
  id                Int                 @id @default(autoincrement())
  key               String              @unique
  value             String              // JSON as string
  
  // Configuration metadata
  category          String?
  description       String?
  isActive          Boolean             @default(true)
  isPublic          Boolean             @default(false)
  
  // Versioning
  version           Int                 @default(1)
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlite_config")
}

// =============================================================================
// SQLITE PERFORMANCE TESTING
// =============================================================================

model SQLitePerformanceTest {
  id                Int                 @id @default(autoincrement())
  testName          String
  iterationCount    Int
  executionTime     Float
  memoryUsage       Int?
  cpuUsage          Float?
  
  // Test metadata as JSON
  metadata          Json?
  
  createdAt         DateTime            @default(now())
  
  @@map("sqlite_performance_test")
}

// =============================================================================
// SQLITE LIMITATIONS TESTING
// =============================================================================

model SQLiteLimitations {
  id                Int                 @id @default(autoincrement())
  
  // Testing SQLite limitations
  limitationType    String
  description       String
  workaround        String?
  
  // Test data
  testData          Json?
  
  // Results
  isLimited         Boolean             @default(true)
  alternativeSolution String?
  
  createdAt         DateTime            @default(now())
  
  @@map("sqlite_limitations")
}