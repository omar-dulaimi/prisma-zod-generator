// SQL Server Simplified Test Schema
// Tests SQL Server-specific features without complex self-referential relationships

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider          = "node ./lib/generator.js"
  output            = "./generated"
  isGenerateSelect  = true
  isGenerateInclude = true
}

datasource db {
  provider = "sqlserver"
  url      = env("SQLSERVER_URL")
}

// =============================================================================
// COMPREHENSIVE SQL SERVER TYPE TESTING
// =============================================================================

model SQLServerAllTypes {
  id                Int                 @id @default(autoincrement())
  
  // Integer types
  tinyintField      Int                 @db.TinyInt
  smallintField     Int                 @db.SmallInt
  intField          Int                 @db.Int
  bigintField       BigInt              @db.BigInt
  
  // Decimal types
  decimalField      Decimal             @db.Decimal(10, 2)
  smallmoneyField   Float               @db.SmallMoney
  moneyField        Float               @db.Money
  floatField        Float               @db.Float(53)
  realField         Float               @db.Real
  
  // Character types
  charField         String              @db.Char(10)
  varcharField      String              @db.VarChar(255)
  textField         String              @db.Text
  ncharField        String              @db.NChar(10)
  nvarcharField     String              @db.NVarChar(255)
  ntextField        String              @db.NText
  
  // Binary types
  binaryField       Bytes               @db.Binary(16)
  varbinaryField    Bytes               @db.VarBinary(255)
  imageField        Bytes               @db.Image
  
  // Date/time types
  dateField         DateTime            @db.Date
  timeField         DateTime            @db.Time
  datetime2Field    DateTime            @db.DateTime2
  datetimeField     DateTime            @db.DateTime
  smalldatetimeField DateTime           @db.SmallDateTime
  datetimeoffsetField DateTime          @db.DateTimeOffset
  
  // Other types
  bitField          Boolean             @db.Bit
  uniqueidentifierField String          @default(uuid()) @db.UniqueIdentifier
  xmlField          String?             @db.Xml
  
  // Optional fields for testing null handling
  optionalText      String?             @db.Text
  optionalInt       Int?                @db.Int
  optionalDecimal   Decimal?            @db.Decimal(8, 2)
  optionalDateTime  DateTime?           @db.DateTime2
  optionalBit       Boolean?            @db.Bit
  optionalGuid      String?             @db.UniqueIdentifier
  optionalXml       String?             @db.Xml
  
  // Computed column simulation
  fullName          String?             // Would be computed in real SQL Server
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlserver_all_types")
}

// =============================================================================
// SIMPLE RELATIONSHIP TESTING
// =============================================================================

model SQLServerUser {
  id                Int                         @id @default(autoincrement())
  guid              String                      @unique @default(uuid()) @db.UniqueIdentifier
  email             String                      @unique @db.NVarChar(255)
  username          String                      @unique @db.NVarChar(100)
  firstName         String                      @db.NVarChar(100)
  lastName          String                      @db.NVarChar(100)
  passwordHash      String                      @db.VarChar(255)
  salt              String                      @db.VarChar(255)
  status            String                      @default("ACTIVE") @db.VarChar(20)
  role              String                      @default("USER") @db.VarChar(20)
  subscriptionType  String                      @default("FREE") @db.VarChar(20)
  
  // Extended profile information
  displayName       String?                     @db.NVarChar(255)
  bio               String?                     @db.NText
  avatarUrl         String?                     @db.NVarChar(500)
  website           String?                     @db.NVarChar(255)
  location          String?                     @db.NVarChar(255)
  timezone          String?                     @db.VarChar(50)
  language          String?                     @db.VarChar(10)
  birthDate         DateTime?                   @db.Date
  phoneNumber       String?                     @db.VarChar(20)
  
  // Account security
  twoFactorEnabled  Boolean                     @default(false) @db.Bit
  twoFactorSecret   String?                     @db.VarChar(255)
  failedLoginAttempts Int                       @default(0) @db.TinyInt
  lockedUntil       DateTime?                   @db.DateTime2
  
  // Subscription details
  subscriptionStartDate DateTime?               @db.Date
  subscriptionEndDate   DateTime?               @db.Date
  billingCycle      String?                     @db.VarChar(20)
  
  // Metadata
  metadata          String?                     @db.NText // JSON as string
  preferences       String?                     @db.NText // JSON as string
  customFields      String?                     @db.NText // JSON as string
  
  // One-to-one relationship
  profile           SQLServerProfile?
  
  // One-to-many relationships
  posts             SQLServerPost[]
  comments          SQLServerComment[]
  likes             SQLServerLike[]
  bookmarks         SQLServerBookmark[]
  
  // Audit fields
  createdBy         Int?
  updatedBy         Int?
  lastLoginAt       DateTime?                   @db.DateTime2
  emailVerifiedAt   DateTime?                   @db.DateTime2
  phoneVerifiedAt   DateTime?                   @db.DateTime2
  termsAcceptedAt   DateTime?                   @db.DateTime2
  
  // Timestamps
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  
  @@map("sqlserver_users")
}

model SQLServerProfile {
  id                Int                 @id @default(autoincrement())
  userId            Int                 @unique
  
  // Professional information
  company           String?             @db.NVarChar(255)
  jobTitle          String?             @db.NVarChar(255)
  industry          String?             @db.NVarChar(100)
  experience        Int?                @db.TinyInt
  salary            Float?              @db.Money
  
  // Education
  education         String?             @db.NText
  certifications    String?             @db.NText
  skills            String?             @db.NText // JSON array as string
  languages         String?             @db.NText // JSON array as string
  
  // Social information
  maritalStatus     String?             @db.VarChar(20)
  childrenCount     Int?                @db.TinyInt
  interests         String?             @db.NText // JSON array as string
  hobbies           String?             @db.NText // JSON array as string
  
  // Privacy settings
  isPublic          Boolean             @default(true) @db.Bit
  showEmail         Boolean             @default(false) @db.Bit
  showPhone         Boolean             @default(false) @db.Bit
  showBirthDate     Boolean             @default(false) @db.Bit
  showSalary        Boolean             @default(false) @db.Bit
  
  // Social media links
  socialLinks       String?             @db.NText // JSON as string
  
  // Analytics
  profileViews      Int                 @default(0)
  lastViewedAt      DateTime?           @db.DateTime2
  
  user              SQLServerUser       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlserver_profiles")
}

model SQLServerPost {
  id                Int                 @id @default(autoincrement())
  guid              String              @unique @default(uuid()) @db.UniqueIdentifier
  title             String              @db.NVarChar(255)
  slug              String              @unique @db.VarChar(255)
  content           String?             @db.NText
  excerpt           String?             @db.NVarChar(500)
  featuredImage     String?             @db.NVarChar(500)
  status            String              @default("DRAFT") @db.VarChar(20)
  priority          String              @default("MEDIUM") @db.VarChar(20)
  contentType       String              @default("TEXT") @db.VarChar(20)
  
  // Publishing
  publishedAt       DateTime?           @db.DateTime2
  scheduledAt       DateTime?           @db.DateTime2
  expiresAt         DateTime?           @db.DateTime2
  
  // SEO
  seoTitle          String?             @db.NVarChar(255)
  seoDescription    String?             @db.NVarChar(500)
  seoKeywords       String?             @db.NVarChar(255)
  canonicalUrl      String?             @db.NVarChar(500)
  
  // Content management
  version           Int                 @default(1)
  isLocked          Boolean             @default(false) @db.Bit
  lockedBy          Int?
  lockedAt          DateTime?           @db.DateTime2
  
  // Moderation
  isApproved        Boolean             @default(true) @db.Bit
  approvedBy        Int?
  approvedAt        DateTime?           @db.DateTime2
  isFeatured        Boolean             @default(false) @db.Bit
  featuredAt        DateTime?           @db.DateTime2
  
  // Analytics
  viewCount         Int                 @default(0)
  likeCount         Int                 @default(0)
  commentCount      Int                 @default(0)
  shareCount        Int                 @default(0)
  downloadCount     Int                 @default(0)
  
  // Engagement metrics
  engagementScore   Float               @default(0.0) @db.Real
  qualityScore      Float               @default(0.0) @db.Real
  trendingScore     Float               @default(0.0) @db.Real
  
  // Metadata
  metadata          String?             @db.NText // JSON as string
  customFields      String?             @db.NText // JSON as string
  tags              String?             @db.NText // JSON array as string
  
  // Author reference
  authorId          Int
  author            SQLServerUser       @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // One-to-many relationships
  comments          SQLServerComment[]
  likes             SQLServerLike[]
  bookmarks         SQLServerBookmark[]
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlserver_posts")
}

model SQLServerComment {
  id                Int                 @id @default(autoincrement())
  guid              String              @unique @default(uuid()) @db.UniqueIdentifier
  content           String              @db.NText
  isEdited          Boolean             @default(false) @db.Bit
  editedAt          DateTime?           @db.DateTime2
  editReason        String?             @db.NVarChar(255)
  
  // Moderation
  isApproved        Boolean             @default(true) @db.Bit
  approvedBy        Int?
  approvedAt        DateTime?           @db.DateTime2
  isFlagged         Boolean             @default(false) @db.Bit
  flaggedReason     String?             @db.NVarChar(255)
  moderationNotes   String?             @db.NText
  
  // Engagement
  likeCount         Int                 @default(0)
  replyCount        Int                 @default(0)
  
  // Author reference
  authorId          Int
  author            SQLServerUser       @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Post reference
  postId            Int
  post              SQLServerPost       @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Metadata
  metadata          String?             @db.NText // JSON as string
  ipAddress         String?             @db.VarChar(45)
  userAgent         String?             @db.NVarChar(500)
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@map("sqlserver_comments")
}

model SQLServerLike {
  id                Int                 @id @default(autoincrement())
  
  userId            Int
  user              SQLServerUser       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  postId            Int
  post              SQLServerPost       @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Metadata
  ipAddress         String?             @db.VarChar(45)
  userAgent         String?             @db.NVarChar(500)
  
  createdAt         DateTime            @default(now())
  
  @@map("sqlserver_likes")
  @@unique([userId, postId])
}

model SQLServerBookmark {
  id                Int                 @id @default(autoincrement())
  
  userId            Int
  user              SQLServerUser       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  postId            Int
  post              SQLServerPost       @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  // Organization
  folderId          Int?
  notes             String?             @db.NText
  
  createdAt         DateTime            @default(now())
  
  @@map("sqlserver_bookmarks")
  @@unique([userId, postId])
}

// =============================================================================
// SQL SERVER ANALYTICS AND REPORTING
// =============================================================================

model SQLServerAnalytics {
  id                Int                 @id @default(autoincrement())
  eventType         String              @db.VarChar(50)
  eventName         String              @db.VarChar(100)
  
  // Event data
  properties        String?             @db.NText // JSON as string
  userProperties    String?             @db.NText // JSON as string
  
  // Session information
  sessionId         String?             @db.VarChar(255)
  userId            Int?
  
  // Technical details
  deviceInfo        String?             @db.NText // JSON as string
  browserInfo       String?             @db.NText // JSON as string
  locationInfo      String?             @db.NText // JSON as string
  
  // Performance metrics
  pageLoadTime      Int?
  responseTime      Int?
  
  // Timestamps
  timestamp         DateTime            @default(now())
  
  @@map("sqlserver_analytics")
}

model SQLServerAuditLog {
  id                Int                 @id @default(autoincrement())
  
  // Operation details
  operation         String              @db.VarChar(50)
  tableName         String              @db.VarChar(100)
  recordId          Int?
  
  // Change tracking
  oldValues         String?             @db.NText // JSON as string
  newValues         String?             @db.NText // JSON as string
  changes           String?             @db.NText // JSON as string
  
  // User context
  userId            Int?
  userEmail         String?             @db.NVarChar(255)
  userRole          String?             @db.VarChar(50)
  
  // Request context
  requestId         String?             @db.VarChar(255)
  sessionId         String?             @db.VarChar(255)
  ipAddress         String?             @db.VarChar(45)
  userAgent         String?             @db.NVarChar(500)
  
  // Metadata
  metadata          String?             @db.NText // JSON as string
  
  // Timestamp
  timestamp         DateTime            @default(now())
  
  @@map("sqlserver_audit_log")
}